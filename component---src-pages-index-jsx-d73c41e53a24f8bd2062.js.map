{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/SEO/index.js"],"names":["query","Index","render","postEdges","this","props","data","prismic","allPosts","edges","location","title","className","config","siteTitle","rel","href","siteUrl","React","Component","definition","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","SEO","description","image","postURL","postNode","postPath","postSEO","excerpt","url","urljoin","pathPrefix","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","name","alternateName","siteTitleAlt","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-pages-index-jsx-d73c41e53a24f8bd2062.js","sourcesContent":["import Helmet from \"react-helmet\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing\";\nimport React from \"react\";\nimport SEO from \"../components/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport { graphql } from \"gatsby\";\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    prismic {\n      allHomepages {\n        edges {\n          node {\n            headline\n            description\n            image\n          }\n        }\n      }\n      allPosts(sortBy: date_DESC) {\n        edges {\n          node {\n            _meta {\n              id\n              uid\n              type\n            }\n            title\n            date\n            image\n            imageSharp {\n              childImageSharp {\n                fluid(maxWidth: 400, maxHeight: 250) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            excerpt\n            category\n            tags {\n              tag {\n                _linkType\n                ... on PRISMIC_Tag {\n                  name\n                  _linkType\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nclass Index extends React.Component {\n  render() {\n    const postEdges = this.props.data.prismic.allPosts.edges;\n    return (\n      <Layout location={this.props.location} title=\"Home\">\n        <div className=\"index-container\">\n          <Helmet>\n            <title>{config.siteTitle}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}`} />\n          </Helmet>\n          <SEO postEdges={postEdges} />\n          <PostListing postEdges={postEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;","require(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\n(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { Component } from \"react\";\n\nimport Helmet from \"react-helmet\";\nimport config from \"../../../data/SiteConfig\";\nimport urljoin from \"url-join\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {      \n      ({ title } = postNode.title);\n      description = postNode.description\n        ? postNode.description\n        : postNode.excerpt;\n      image = postNode.image ? postNode.image.url : '';\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n"],"sourceRoot":""}